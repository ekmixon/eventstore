/*
Copyright (c) 2020 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/eventstore/pkg/apis/eventstores/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InMemoryStoreLister helps list InMemoryStores.
type InMemoryStoreLister interface {
	// List lists all InMemoryStores in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.InMemoryStore, err error)
	// InMemoryStores returns an object that can list and get InMemoryStores.
	InMemoryStores(namespace string) InMemoryStoreNamespaceLister
	InMemoryStoreListerExpansion
}

// inMemoryStoreLister implements the InMemoryStoreLister interface.
type inMemoryStoreLister struct {
	indexer cache.Indexer
}

// NewInMemoryStoreLister returns a new InMemoryStoreLister.
func NewInMemoryStoreLister(indexer cache.Indexer) InMemoryStoreLister {
	return &inMemoryStoreLister{indexer: indexer}
}

// List lists all InMemoryStores in the indexer.
func (s *inMemoryStoreLister) List(selector labels.Selector) (ret []*v1alpha1.InMemoryStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InMemoryStore))
	})
	return ret, err
}

// InMemoryStores returns an object that can list and get InMemoryStores.
func (s *inMemoryStoreLister) InMemoryStores(namespace string) InMemoryStoreNamespaceLister {
	return inMemoryStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InMemoryStoreNamespaceLister helps list and get InMemoryStores.
type InMemoryStoreNamespaceLister interface {
	// List lists all InMemoryStores in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.InMemoryStore, err error)
	// Get retrieves the InMemoryStore from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.InMemoryStore, error)
	InMemoryStoreNamespaceListerExpansion
}

// inMemoryStoreNamespaceLister implements the InMemoryStoreNamespaceLister
// interface.
type inMemoryStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InMemoryStores in the indexer for a given namespace.
func (s inMemoryStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InMemoryStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InMemoryStore))
	})
	return ret, err
}

// Get retrieves the InMemoryStore from the indexer for a given namespace and name.
func (s inMemoryStoreNamespaceLister) Get(name string) (*v1alpha1.InMemoryStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("inmemorystore"), name)
	}
	return obj.(*v1alpha1.InMemoryStore), nil
}
