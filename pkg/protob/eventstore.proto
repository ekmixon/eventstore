/*
Copyright (c) 2020 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
option go_package = "github.com/triggermesh/eventstore/pkg/protob";
package protob;


enum ScopeChoice {
  Instance = 0;
  Bridge = 1;
  Global = 2;
}

message ScopeType {
  ScopeChoice type = 1;
  string bridge = 2;
  string instance = 3;
}

message LocationType {
  ScopeType scope = 1;
  string key = 2;
}

message SetRequest {
  LocationType location = 1;
  int32 ttl = 2;
  bytes value = 3;
}

message SetResponse {}

message IncrRequest {
  LocationType location = 1;
  int32 incr = 2;
}

message IncrResponse {}

message DecrRequest {
  LocationType location = 1;
  int32 decr = 2;
}

message DecrResponse {}

message GetRequest {
  LocationType location = 1;
}

message GetResponse {
  bytes value = 1;
}

message DelRequest {
  LocationType location = 1;
}

message DelResponse {}

// KVStore interface
service KVStore {
  // Set KV at storage
  rpc Set(SetRequest) returns (SetResponse) {}

  // Incr increments an integer value from storage
  rpc Incr(IncrRequest) returns (IncrResponse) {}

  // Decr decrements an integer value from storage
  rpc Decr(DecrRequest) returns (DecrResponse) {}

  // Del item from storage
  rpc Del(DelRequest) returns (DelResponse) {}

  // Get item from storage
  rpc Get(GetRequest) returns (GetResponse) {}
}

// Map interface
service Map {
  // Set KV at map
  rpc Set(SetRequest) returns (SetResponse) {}

  // Incr increments integer value at map
  rpc Incr(IncrRequest) returns (IncrResponse) {}

  // Decr decrements integer value at map
  rpc Decr(DecrRequest) returns (DecrResponse) {}

  // Del key at map
  rpc Del(DelRequest) returns (DelResponse) {}

  // Get value at key
  rpc Get(GetRequest) returns (GetResponse) {}

  // GetAll all KVs in map
  rpc GetAll(GetAllRequest) returns (GetAllResponse) {}

  // Len for the map
  rpc Len(LenRequest) returns (LenResponse) {}
}

// Queue interface
service Queue {
  // Push value in map
  rpc Push(PushRequest) returns (PushResponse) {}

  // Index returns the element at the index
  rpc Index(IndexRequest) returns (IndexResponse) {}

  // Len for the queue
  rpc Len(LenRequest) returns (LenResponse) {}

  // Pop retrieves and removes an element from the queue
  rpc Pop(PopRequest) returns (PopResponse) {}

  // Peek retrieves an element from the queue
  rpc Peek(PeekRequest) returns (PeekResponse) {}

  // Lock the queue for exclusive access
  rpc Lock(LockRequest) returns (LockRequest) {}

  // Unlock the queue
  rpc Unlock(UnlockRequest) returns (UnlockResponse) {}
}

